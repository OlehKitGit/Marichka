from telegram import InputMediaPhoto
import logging
import os
import torch
from fastai.vision.all import *
from pathlib import Path
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, Updater
)

active_users = set()

# –í–∞—à –ª–∏—á–Ω—ã–π Telegram ID (—É–∑–Ω–∞—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ @userinfobot)
ALLOWED_USER_ID = 334654605  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8083225695:AAEx6wfl1dfTIInhV6BIw73V2INMKma8aIY"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
   # user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
   # if user_id != ALLOWED_USER_ID:
   #     await update.message.reply_text("")
   #     return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
    #if user_id  in active_users:
    #    await update.message.reply_text("‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞ —Ä–∞–Ω–µ–µ.")
    #    return

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
    #active_users.add(user_id)
   # else:
    await update.message.reply_text("‚úÖ Know the Truth!")
    return

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    #user_id = update.effective_user.id

    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –≤—Å–µ—Ö, –∫—Ä–æ–º–µ –≤–∞—Å
    if user_id != ALLOWED_USER_ID:
        await update.message.reply_text("")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ /start
   # if user_id not in active_users:
   #     await update.message.reply_text("‚ö† –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
   #     return
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ /start
   # if user_id not in active_users:
   #     await update.message.reply_text("‚ö† –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
   #     return

    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫
    #await update.message.reply_text("üñº –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏...")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏"""
    logging.error(f'Update {update} caused error {context.error}')

def main():
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

# === –ó–ê–ì–†–£–ó–ö–ê –ú–û–î–ï–õ–ò ===
# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –¥–∞–Ω–Ω—ã–º–∏
base_dir = Path('~/paintings/venv311/paintings').expanduser() 
models_dir = base_dir / 'models'
models_dir.mkdir(exist_ok=True)

# DataLoaders –¥–ª—è –º–æ–¥–µ–ª–∏
def get_data(bs=16, size=224):
    data = ImageDataLoaders.from_folder(
        base_dir,
        train='.',
        valid_pct=0.2,
        item_tfms=Resize(size),
        batch_tfms=Normalize.from_stats(*imagenet_stats),
        bs=bs,
        num_workers=0,
        valid_extensions=['.jpg' '.jpeg'],  # –£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        ignore_empty=True  # –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å –ø—É—Å—Ç—ã–µ/–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    )
    return data

data = get_data()
learn = vision_learner(
    data,
    arch="efficientnet_b0",
    metrics=[accuracy, error_rate],
    pretrained=True
)

learn= load_learner('/root/paintings/venv311/paintings/models/final_model4.pkl')

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö /start ===
#async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
#    await update.message.reply_text(
#        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ –∏ —è –æ–ø–∏—à—É –ø–æ –Ω–µ–º—É –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ–≥–æ –ø—Ä–∏—á–∏–Ω—É –∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è."
#    )

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ===
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    photo_file = await update.message.photo[-1].get_file()
    img_path = Path(f'temp_{update.message.from_user.id}.jpg')
    await photo_file.download_to_drive(str(img_path))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
    img = PILImage.create(img_path)
    pred_class, pred_idx, outputs = learn.predict(img)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤
    probs = {cls_name: outputs[i].item() for i, cls_name in enumerate(learn.dls.vocab)}

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    sorted_probs = sorted(probs.items(), key=lambda x: x[1], reverse=True)
    top1_cls, top1_prob = sorted_probs[0]
    top2_cls, top2_prob = sorted_probs[1]

    tarot_dir = Path('/root/paintings/venv311/TarotE')

    def get_tarot_path(cls, prob):
        num = prob
        if cls in ["norm", "norm_child"]:
            # –ü—Ä—è–º–∞—è –∫–∞—Ä—Ç–∞
            num = num - 77 if num > 77 else num  # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–æ–π –∫–∞—Ä—Ç—ã
            fname = next(tarot_dir.glob(f"{num}.*_–ø—Ä—è–º–∞—è*"), None)
            if fname == None:
                fname = next(tarot_dir.glob(f"{num}.*_–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è*"), None)
            print(fname)
        elif cls in ["schizo", "schizo_child"]:
            num = num - 77 if num > 77 else num  # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–æ–π –∫–∞—Ä—Ç—ã
            fname = next(tarot_dir.glob(f"{num}.*_–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è*"), None)
            if fname == None:
                fname = next(tarot_dir.glob(f"{num}.*_–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è*"), None)
            print(fname)
        else:
            fname = None
        return fname

    # –ù–∞—Ö–æ–¥–∏–º –ø—É—Ç–∏ –∫ –∫–∞—Ä—Ç–∞–º
    top2_prob = int(str(top1_prob)[2:4])
    print(top1_prob)
    card1 = get_tarot_path(top1_cls, top2_prob)
    print(top2_prob)
    top3_prob = int(str(top1_prob)[4:6])
    print(top3_prob)
    card2 = get_tarot_path(top1_cls, top3_prob)
    top4_prob = int(str(top1_prob)[6:8])
    print(top4_prob)
    card3 = get_tarot_path(top1_cls, top4_prob)


    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã
    if card1 and card2 and card3:
        await update.message.reply_text("Premise")
        await update.message.reply_photo(card1)
        await update.message.reply_text("Consequence")
        await update.message.reply_photo(card2)
        await update.message.reply_text("Step")
        await update.message.reply_photo(card3)
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

    img_path.unlink()  # —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏


# === –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===
def main() -> None:
    # –ó–∞–º–µ–Ω–∏—Ç–µ TOKEN –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!
    TOKEN = "8083225695:AAEx6wfl1dfTIInhV6BIw73V2INMKma8aIY"

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()
